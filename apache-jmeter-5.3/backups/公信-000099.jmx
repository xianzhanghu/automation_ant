<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="公信" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="environment" elementType="Argument">
            <stringProp name="Argument.name">environment</stringProp>
            <stringProp name="Argument.value">测试服</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP请求默认值" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${domain}</stringProp>
          <stringProp name="HTTPSampler.port">80</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="测试服环境" enabled="true">
          <stringProp name="IfController.condition">&quot;${environment}&quot;==&quot;测试服&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="全局化变量" enabled="true">
            <stringProp name="BeanShellSampler.query">vars.put(&quot;domain&quot;,&quot;192.168.2.172&quot;);  //地址
vars.put(&quot;username&quot;,&quot;admin&quot;);       //后台账户
vars.put(&quot;password&quot;,&quot;Gonsin123&quot;);     //后台密码
vars.put(&quot;sessionId&quot;,&quot;${__RandomString(32,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,)}&quot;);
vars.put(&quot;building&quot;,&quot;building_${__RandomString(32,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,)}&quot;);   //楼栋唯一标识
vars.put(&quot;floor&quot;,&quot;floor_${__RandomString(32,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,)}&quot;);   //楼层唯一表示
vars.put(&quot;room&quot;,&quot;room_${__RandomString(32,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,)}&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="登录" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_登录" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="sessionId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sessionId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sessionId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/handle_login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
              <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="初始化清空数据" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_会议室管理" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_坐席设置" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_查询获取number_03" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">-createTime</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/device/seat/find</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                <stringProp name="VAR">number_03</stringProp>
                <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].seatKey</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_删除检查数据" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${number_03}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_查询获取number_03" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="count" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">700</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">count</stringProp>
                    </elementProp>
                    <elementProp name="name" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">name</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                    <elementProp name="sort" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">-createTime</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sort</stringProp>
                    </elementProp>
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/device/seat/find</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                  <stringProp name="VAR">number_03</stringProp>
                  <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].seatKey</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                  <stringProp name="INPUT_FORMAT">JSON</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_删除" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="seatKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${number_03_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">seatKey</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/device/seat/delete</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_楼层管理" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_查询获取number_02" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">+sort</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                <stringProp name="VAR">number_02</stringProp>
                <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].keyOnly</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_删除检查数据" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${number_02_matchNr}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_查询获取number_02" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="count" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">700</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">count</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                    <elementProp name="sort" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">+sort</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sort</stringProp>
                    </elementProp>
                    <elementProp name="parentRoomKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">parentRoomKey</stringProp>
                    </elementProp>
                    <elementProp name="roomType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roomType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                  <stringProp name="VAR">number_02</stringProp>
                  <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].keyOnly</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                  <stringProp name="INPUT_FORMAT">JSON</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_删除" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="roomKeys" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${number_02_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roomKeys</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/delete/batch/building</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_楼栋管理" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_查询获取number_01" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">+sort</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                <stringProp name="VAR">number_01</stringProp>
                <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].keyOnly</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="后台_删除检查数据" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${number_01_matchNr}</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_查询获取number_01" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="count" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">700</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">count</stringProp>
                    </elementProp>
                    <elementProp name="page" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">page</stringProp>
                    </elementProp>
                    <elementProp name="sort" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">+sort</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sort</stringProp>
                    </elementProp>
                    <elementProp name="parentRoomKey" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">parentRoomKey</stringProp>
                    </elementProp>
                    <elementProp name="roomType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">3</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roomType</stringProp>
                    </elementProp>
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="获取总的业务流程" enabled="true">
                  <stringProp name="VAR">number</stringProp>
                  <stringProp name="JSONPATH">$..[?(@.name=~/.*自动化.*/)].keyOnly</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                  <stringProp name="INPUT_FORMAT">JSON</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_删除" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="sessionId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sessionId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">sessionId</stringProp>
                    </elementProp>
                    <elementProp name="roomKeys" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${number_01_1}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">roomKeys</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/delete/batch/building</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                  <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="资源管理" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="楼栋管理" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_添加" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化楼栋_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/saveFloor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_修改" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化编辑楼栋_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/saveFloor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_查询" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">+sort</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼栋管理_删除" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKeys" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKeys</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/delete/batch/building</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="楼层管理" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_新增" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化楼层_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${floor}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/saveFloor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_修改" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化编辑楼层_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${floor}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/saveFloor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_查询" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">+sort</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/handle_query_floor</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_楼层管理_删除" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKeys" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${floor}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKeys</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/delete/batch/building</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="坐席设置" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_新增" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="json" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;seatId&quot;:0,&quot;width&quot;:48,&quot;height&quot;:27,&quot;background&quot;:&quot;&quot;,&quot;name&quot;:&quot;自动化坐席_${__time(yyyy-MM-dd HH:mm:ss,)}&quot;,&quot;globalSeat&quot;:{&quot;hideDeviceNumber&quot;:false,&quot;hideNumber&quot;:true,&quot;hideName&quot;:true,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;}},&quot;components&quot;:[{&quot;componentId&quot;:&quot;3Q8JFKXHCVCRGLUV&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:6,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;BQRDWNAKPGC729GH&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:5,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;646PN3BGUX6TV5MR&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:4,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;BAUDYBZWWYFDFJA4&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:3,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;Z4EUOZ3MQZGNTCI1&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:2,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;F8QAEQWKAQL6DQJV&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:1,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">json</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="seatKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatKey</stringProp>
                  </elementProp>
                  <elementProp name="previewUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">/files/headers/AAETMbjjUNQH5BL5fqQ0CZzKpPufRENO.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">previewUrl</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/device/seat/save</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_查询获取seatKey" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">-createTime</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/device/seat/find</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="提取seatKey" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">seatKey</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..data[?(@.name=~/.*自动化.*/)].seatKey</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_编辑" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="json" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;seatId&quot;:0,&quot;width&quot;:48,&quot;height&quot;:27,&quot;background&quot;:&quot;&quot;,&quot;name&quot;:&quot;自动化编辑坐席_${__time(yyyy-MM-dd HH:mm:ss,)}&quot;,&quot;globalSeat&quot;:{&quot;hideDeviceNumber&quot;:false,&quot;hideNumber&quot;:true,&quot;hideName&quot;:true,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;}},&quot;components&quot;:[{&quot;componentId&quot;:&quot;3Q8JFKXHCVCRGLUV&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:6,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;BQRDWNAKPGC729GH&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:5,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;646PN3BGUX6TV5MR&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:4,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;BAUDYBZWWYFDFJA4&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:3,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;Z4EUOZ3MQZGNTCI1&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:2,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;F8QAEQWKAQL6DQJV&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:1,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;HA8UCSO41F6GFLE5&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:21,&quot;y&quot;:7,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;6UJ1GBZE92IHFYP2&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:20,&quot;y&quot;:8,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;57X3H7JJ3UCS1OXX&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:10,&quot;y&quot;:2,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;D5IMA4XYE594TWDU&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:11,&quot;y&quot;:1,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;EPPIKZVBFIJQWMA3&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:11,&quot;y&quot;:3,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;I3BY11628UGUMXA9&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:10,&quot;y&quot;:4,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;SKKBDIPX9JMBT7ZR&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:11,&quot;y&quot;:5,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;DCBJLZ9XM3CFRTCF&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:10,&quot;y&quot;:6,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;B3WZB4H3MU131L4H&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:11,&quot;y&quot;:7,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]},{&quot;componentId&quot;:&quot;I39SVT382JDV9AJ9&quot;,&quot;type&quot;:&quot;seats&quot;,&quot;zIndex&quot;:2,&quot;x&quot;:10,&quot;y&quot;:8,&quot;groupAngle&quot;:0,&quot;angle&quot;:0,&quot;seatCount&quot;:5,&quot;height&quot;:1,&quot;divide&quot;:1,&quot;nameDivider&quot;:1,&quot;numberDivider&quot;:1,&quot;deviceNumberDivider&quot;:1,&quot;custom&quot;:true,&quot;seatIcon&quot;:{&quot;normal&quot;:{&quot;numberColor&quot;:&quot;#666666&quot;,&quot;nameColor&quot;:&quot;#666666&quot;,&quot;deviceNumberColor&quot;:&quot;#666666&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/normal.svg&quot;,&quot;iconColor&quot;:&quot;#666666&quot;},&quot;offline&quot;:{&quot;numberColor&quot;:&quot;#CCCCCC&quot;,&quot;nameColor&quot;:&quot;#CCCCCC&quot;,&quot;deviceNumberColor&quot;:&quot;#CCCCCC&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/offline.svg&quot;,&quot;iconColor&quot;:&quot;#CCCCCC&quot;},&quot;registered&quot;:{&quot;numberColor&quot;:&quot;#26CA83&quot;,&quot;nameColor&quot;:&quot;#26CA83&quot;,&quot;deviceNumberColor&quot;:&quot;#26CA83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/reports.svg&quot;,&quot;iconColor&quot;:&quot;#26CA83&quot;},&quot;voted&quot;:{&quot;numberColor&quot;:&quot;#008111&quot;,&quot;nameColor&quot;:&quot;#008111&quot;,&quot;deviceNumberColor&quot;:&quot;#008111&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/vote.svg&quot;,&quot;iconColor&quot;:&quot;#008111&quot;},&quot;calling&quot;:{&quot;numberColor&quot;:&quot;#FF6160&quot;,&quot;nameColor&quot;:&quot;#FF6160&quot;,&quot;deviceNumberColor&quot;:&quot;#FF6160&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/callservice.svg&quot;,&quot;iconColor&quot;:&quot;#FF6160&quot;},&quot;openedMic&quot;:{&quot;numberColor&quot;:&quot;#BA26CA&quot;,&quot;nameColor&quot;:&quot;#BA26CA&quot;,&quot;deviceNumberColor&quot;:&quot;#BA26CA&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-fill.svg&quot;,&quot;iconColor&quot;:&quot;#BA26CA&quot;},&quot;waitingMic&quot;:{&quot;numberColor&quot;:&quot;#A47300&quot;,&quot;nameColor&quot;:&quot;#A47300&quot;,&quot;deviceNumberColor&quot;:&quot;#A47300&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/mic-line.svg&quot;,&quot;iconColor&quot;:&quot;#A47300&quot;},&quot;nameplateSetting&quot;:{&quot;numberColor&quot;:&quot;#26ca83&quot;,&quot;nameColor&quot;:&quot;#26ca83&quot;,&quot;deviceNumberColor&quot;:&quot;#26ca83&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate1.svg&quot;,&quot;iconColor&quot;:&quot;#26ca83&quot;},&quot;nameplateFinished&quot;:{&quot;numberColor&quot;:&quot;#fb6704&quot;,&quot;nameColor&quot;:&quot;#fb6704&quot;,&quot;deviceNumberColor&quot;:&quot;#fb6704&quot;,&quot;iconUrl&quot;:&quot;/static/images/svg/nameplate2.svg&quot;,&quot;iconColor&quot;:&quot;#fb6704&quot;}},&quot;seatWidth&quot;:1,&quot;seatHeight&quot;:1,&quot;name&quot;:{&quot;direction&quot;:&quot;bottom&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;number&quot;:{&quot;direction&quot;:&quot;center&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;deviceNumber&quot;:{&quot;direction&quot;:&quot;top&quot;,&quot;size&quot;:4,&quot;fontStyle&quot;:&quot;msyh&quot;,&quot;bold&quot;:false,&quot;underline&quot;:false},&quot;seatNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;],&quot;deviceNumbers&quot;:[&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;]}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">json</stringProp>
                  </elementProp>
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="seatKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${seatKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatKey</stringProp>
                  </elementProp>
                  <elementProp name="previewUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">/files/headers/isPpRGb9M5ch8SHKYFj37c3xN6r2pS1s.png</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">previewUrl</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/device/seat/save</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="固定定时器" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_坐席设置_删除" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="seatKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${seatKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatKey</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/device/seat/delete</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="会议室管理" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="会议室管理_参数化true或false" enabled="true">
              <stringProp name="BeanShellSampler.query">Random r = new Random();
String result;
int a = r.nextInt(2);
switch (a){
    case 0:
        result = &quot;true&quot;;
        break;
    case 1:
        result = &quot;false&quot;;
        break;
    default:
        throw new IllegalStateException(&quot;Unexpected value: &quot; + a);
}
System.out.println(result);
vars.put(&quot;random&quot;,result); </stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_新增获取room" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="disable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${random}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">disable</stringProp>
                  </elementProp>
                  <elementProp name="buildingRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">buildingRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="keyOnly" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyOnly</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化会议室_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${floor}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="people" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__Random(50,900,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">people</stringProp>
                  </elementProp>
                  <elementProp name="remark" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">会议内容_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">remark</stringProp>
                  </elementProp>
                  <elementProp name="roomNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__Random(300,820,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomNumber</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="seatKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${seatKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatKey</stringProp>
                  </elementProp>
                  <elementProp name="seatUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">/files/headers/YZGptFmpi5nAIEAbAwTqqoGxgMlV2Zu6.jpeg</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatUrl</stringProp>
                  </elementProp>
                  <elementProp name="needAudit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${random}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">needAudit</stringProp>
                  </elementProp>
                  <elementProp name="openTimes" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0~86400000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">openTimes</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/saveBuilding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="获取room" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">room</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..data[?(@.floorName=~/.*自动化.*/)].keyOnly</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_编辑" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="disable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${random}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">disable</stringProp>
                  </elementProp>
                  <elementProp name="buildingRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${building}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">buildingRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="keyOnly" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${room}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyOnly</stringProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">自动化编辑会议室_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${floor}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="people" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__Random(50,900,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">people</stringProp>
                  </elementProp>
                  <elementProp name="remark" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">会议内容_${__time(yyyy-MM-dd HH:mm:ss,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">remark</stringProp>
                  </elementProp>
                  <elementProp name="roomNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__Random(300,820,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomNumber</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="seatKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${seatKey}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatKey</stringProp>
                  </elementProp>
                  <elementProp name="seatUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seatUrl</stringProp>
                  </elementProp>
                  <elementProp name="needAudit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${random}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">needAudit</stringProp>
                  </elementProp>
                  <elementProp name="openTimes" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">30600000~81000000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">openTimes</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/saveBuilding</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_停用" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${room}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="enable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">enable</stringProp>
                  </elementProp>
                  <elementProp name="disableReason" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">停用理由无</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">disableReason</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/rooms/${room}/enable</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_启用" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${room}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKey</stringProp>
                  </elementProp>
                  <elementProp name="enable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">enable</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/rooms/${room}/enable</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_查询" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomType</stringProp>
                  </elementProp>
                  <elementProp name="parentRoomKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">parentRoomKey</stringProp>
                  </elementProp>
                  <elementProp name="count" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">700</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">count</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="sort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">-createTime</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sort</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/handle_query_building</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${environment}_后台_资源管理_会议室管理_删除" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sessionId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sessionId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sessionId</stringProp>
                  </elementProp>
                  <elementProp name="roomKeys" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${room}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">roomKeys</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/delete/batch/building</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell断言" enabled="true">
                <stringProp name="BeanShellAssertion.query">String response = &quot;&quot;;
String Str = &quot;200&quot;;   //预期结果，需要校验的字段

response = prev.getResponseDataAsString();    //获取当前请求响应结果
  
if(response == &quot;&quot;){  
    Failure = true;  
    FailureMessage =   &quot;系统无响应，获取不到响应数据！&quot;;  
    //对比数据库内容和响应内容，私用euqals方法判断是否一致  
    }
else if(response.contains(Str) == false){  
        //把断言失败置为真   
        Failure = true;    
        String Msg = &quot;\n系统返回响应结果与期望结果不一致！请排查是性能问题，还是程序代码问题&quot;;       		          FailureMessage = Msg + &quot;\n&quot; + &quot;期望结果:\n&quot; + Str + &quot;\n&quot; + &quot;响应内容: \n&quot; + response +&quot;\n&quot;;   
        }</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="调试取样器" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
